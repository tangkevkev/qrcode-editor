{"version":3,"sources":["UI/QR-Editor.tsx","UI/SingleEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","margin","spacing","extendedIcon","marginRight","QREditor","props","classes","className","Grid","container","direction","justifyContent","alignItems","size","fgColor","color","value","content","level","includeMargin","imageSettings","src","subTitle","Button","variant","component","IconButton","aria-label","fontSize","root","width","box","borderStyle","rootGrid","flexGrow","paper","padding","textAlign","palette","text","secondary","SingleEditor","useTranslation","t","useState","imageSrc","setContent","setSubtitle","setColor","alignContent","justify","Paper","elevation","item","noValidate","autoComplete","TextField","id","multiline","maxRows","label","onChange","event","target","colors","hex","triangle","App","React","setValue","Fragment","square","Tabs","indicatorColor","textColor","centered","newValue","console","log","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28b684e7.chunk.js","sourcesContent":["\r\nimport { Grid } from '@material-ui/core';\r\nimport QRCode from 'qrcode.react'\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\n\r\ninterface QRProps {\r\n  content: string,\r\n  color?: string,\r\n  imageSrc?: string,\r\n  subTitle?: string,\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    margin: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n  }),\r\n);\r\n\r\nfunction QREditor(props: QRProps) {\r\n\r\n  const classes = useStyles();\r\n\r\n\r\n  return (\r\n    <div className=\"HpQrcode\"> \r\n\r\n      <Grid container spacing={0}\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\">\r\n        <QRCode\r\n          size={256}\r\n          fgColor={props.color}\r\n          value={props.content}\r\n          level={'H'}\r\n          includeMargin={true}\r\n          imageSettings={{\r\n            src: \"https://static.zpao.com/favicon.png\"\r\n          }}\r\n        />\r\n        {props.subTitle}\r\n        <Button variant=\"text\" color=\"primary\" component=\"span\">\r\n          Download\r\n          <IconButton aria-label=\"delete\" className={classes.margin} size=\"small\">\r\n            <ArrowDownwardIcon fontSize=\"inherit\" />\r\n          </IconButton>\r\n        </Button>\r\n\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QREditor;\r\n","import './../App.css';\r\nimport { useState } from \"react\";\r\nimport QREditor from './QR-Editor'\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { BlockPicker } from 'react-color'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  box: {\r\n    borderStyle: 'solid',\r\n  },\r\n  rootGrid: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n\r\nfunction SingleEditor() {\r\n\r\n  const classes = useStyles();\r\n  const { t, } = useTranslation();\r\n\r\n  const DEFAULT_IMAGE_SRC = \"\"\r\n  const DEFAULT_USE_IMAGE = false\r\n  const DEFAULT_CONTENT = \"\"\r\n  const DEFAULT_COLOR = \"\"\r\n\r\n  const [imageSrc, setImageSrc] = useState(\"\")\r\n  const [useImage, setUseImage] = useState(false)\r\n  const [content, setContent] = useState(\"google.ch\")\r\n  const [subTitle, setSubtitle] = useState(\"\")\r\n  const [color, setColor] = useState(\"#000000\")\r\n\r\n\r\n  function reset() {\r\n    setImageSrc(DEFAULT_IMAGE_SRC)\r\n    setUseImage(DEFAULT_USE_IMAGE)\r\n    setContent(DEFAULT_CONTENT)\r\n    setColor(DEFAULT_COLOR)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`${classes.rootGrid}`}>\r\n      <Grid container spacing={2}\r\n        direction=\"row\"\r\n        alignContent=\"center\"\r\n        justify=\"center\">\r\n\r\n        <Paper elevation={4}>\r\n\r\n\r\n          <Grid item>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n              <TextField id=\"standard-basic\"\r\n                multiline={true}\r\n                maxRows={3}\r\n                label=\"QR Content\"\r\n                onChange={(event) => { setContent(event.target.value) }}\r\n                value={content}\r\n              />\r\n            </form>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n              <TextField id=\"standard-basic\"\r\n                label=\"Subtitle [Optional]\"\r\n                onChange={(event) => { setSubtitle(event.target.value) }}\r\n                value={subTitle}\r\n              />\r\n            </form>\r\n            <div className=\"flex-container\">\r\n              <BlockPicker\r\n                color={color}\r\n                colors={['#000000', '#808080', '#FF0000',\r\n                  '#FFD800', '#4CFF00', '#00FFFF',\r\n                  '#0094FF', '#0026FF', '#FF7FED', '#007F0E']}\r\n                onChange={(event) => setColor(event.hex)} triangle={'hide'} />\r\n            </div>\r\n          </Grid>\r\n        </Paper>\r\n\r\n\r\n\r\n        <Grid item>\r\n          <QREditor content={content} color={color} imageSrc={imageSrc} subTitle={subTitle} />\r\n        </Grid>\r\n\r\n      </Grid>\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default SingleEditor;\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport SingleEditor from './UI/SingleEditor';\r\n\r\n\r\nconst SINGLE_EDITOR_INDEX = 0\r\nconst MULTIPLE_EDITOR_INDEX = 1\r\n\r\nexport default function App() {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    console.log(\"New value: \" + newValue)\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper square>\r\n        <Tabs\r\n          value={value}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          centered={true}\r\n          onChange={handleChange}\r\n          aria-label=\"disabled tabs example\"\r\n        >\r\n          <Tab label=\"Single Editor\" value={SINGLE_EDITOR_INDEX} />\r\n          <Tab label=\"Active\" value={MULTIPLE_EDITOR_INDEX} />\r\n        </Tabs>\r\n      </Paper>\r\n      <br/>\r\n      {value == SINGLE_EDITOR_INDEX && <SingleEditor />}\r\n    </React.Fragment>\r\n  );\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
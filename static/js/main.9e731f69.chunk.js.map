{"version":3,"sources":["UI/QR-Editor.tsx","UI/SingleEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QREditor","props","Grid","container","spacing","direction","justifyContent","alignItems","size","fgColor","color","value","content","level","subTitle","useStyles","makeStyles","theme","root","margin","width","box","borderStyle","rootGrid","flexGrow","paper","padding","textAlign","palette","text","secondary","SingleEditor","classes","useTranslation","t","useState","imageSrc","setContent","setSubtitle","setColor","className","item","xs","lg","Paper","elevation","noValidate","autoComplete","TextField","id","label","onChange","event","target","hex","triangle","App","React","setValue","Fragment","square","Tabs","indicatorColor","textColor","centered","newValue","console","log","aria-label","Tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e731f69.chunk.js","sourcesContent":["\r\nimport { Grid } from '@material-ui/core';\r\nimport QRCode from 'qrcode.react'\r\n\r\n\r\ninterface QRProps {\r\n  content: string,\r\n  color?: string,\r\n  imageSrc?: string,\r\n  subTitle?: string,\r\n}\r\n\r\nfunction QREditor(props: QRProps) {\r\n  return (\r\n    <Grid container spacing={0}\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\">\r\n      <QRCode\r\n        size={256}\r\n        fgColor={props.color}\r\n        value={props.content}\r\n        level={'H'}\r\n      >\r\n      </QRCode>\r\n      {props.subTitle}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default QREditor;\r\n","import './../App.css';\r\nimport { useState } from \"react\";\r\nimport QREditor from './QR-Editor'\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TwitterPicker, BlockPicker } from 'react-color'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  box: {\r\n    borderStyle: 'solid',\r\n  },\r\n  rootGrid: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n\r\nfunction SingleEditor() {\r\n\r\n    const classes = useStyles();\r\n    const { t, } = useTranslation();\r\n  \r\n    const DEFAULT_IMAGE_SRC = \"\"\r\n    const DEFAULT_USE_IMAGE = false\r\n    const DEFAULT_CONTENT = \"\"\r\n    const DEFAULT_COLOR = \"\"\r\n  \r\n    const [imageSrc, setImageSrc] = useState(\"\")\r\n    const [useImage, setUseImage] = useState(false)\r\n    const [content, setContent] = useState(\"google.ch\")\r\n    const [subTitle, setSubtitle] = useState(\"\")\r\n    const [color, setColor] = useState(\"#00FF00\")\r\n  \r\n  \r\n    function reset() {\r\n      setImageSrc(DEFAULT_IMAGE_SRC)\r\n      setUseImage(DEFAULT_USE_IMAGE)\r\n      setContent(DEFAULT_CONTENT)\r\n      setColor(DEFAULT_COLOR)\r\n    }\r\n  \r\n  \r\n    return (\r\n      <div className={`${classes.rootGrid}`}>\r\n        <Grid container spacing={2}\r\n          direction=\"row\">\r\n          <Grid item xs={12} lg={4}  />\r\n          <Grid item xs={12} lg={2} \r\n            container\r\n            direction=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\">\r\n            <Paper elevation={3}>\r\n  \r\n              <Grid item>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                  <TextField id=\"standard-basic\"\r\n                    label=\"QR Content\"\r\n                    onChange={(event) => { setContent(event.target.value) }}\r\n                    value={content}\r\n                  />\r\n                </form>\r\n              </Grid>\r\n              <Grid item>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                  <TextField id=\"standard-basic\"\r\n                    label=\"Subtitle\"\r\n                    onChange={(event) => { setSubtitle(event.target.value) }}\r\n                    value={subTitle}\r\n                  />\r\n                </form>\r\n              </Grid>\r\n              <Grid item\r\n                container\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\">\r\n                <BlockPicker color={color} onChange={(event) => setColor(event.hex)} triangle={'hide'} />\r\n              </Grid>\r\n            </Paper>\r\n  \r\n          </Grid>\r\n  \r\n          <Grid item xs={12} lg={2} \r\n            container\r\n            alignItems=\"center\"\r\n            justifyContent=\"flex-start\">\r\n            <QREditor content={content} color={color} imageSrc={imageSrc} subTitle={subTitle} />\r\n          </Grid>\r\n        </Grid>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n  export default SingleEditor;\r\n","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport SingleEditor from './UI/SingleEditor';\r\n\r\n\r\nconst SINGLE_EDITOR_INDEX = 0\r\nconst MULTIPLE_EDITOR_INDEX = 1\r\n\r\nexport default function App() {\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n    console.log(\"New value: \" + newValue)\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper square>\r\n        <Tabs\r\n          value={value}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          centered={true}\r\n          onChange={handleChange}\r\n          aria-label=\"disabled tabs example\"\r\n        >\r\n          <Tab label=\"Single Editor\" value={SINGLE_EDITOR_INDEX} />\r\n          <Tab label=\"Active\" value={MULTIPLE_EDITOR_INDEX} />\r\n        </Tabs>\r\n      </Paper>\r\n      <br/>\r\n      {value == SINGLE_EDITOR_INDEX && <SingleEditor />}\r\n    </React.Fragment>\r\n  );\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
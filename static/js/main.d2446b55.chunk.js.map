{"version":3,"sources":["QR-Editor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QREditor","props","Grid","container","spacing","direction","justifyContent","alignItems","size","fgColor","color","value","content","level","subTitle","useStyles","makeStyles","theme","root","margin","width","box","borderStyle","rootGrid","flexGrow","paper","padding","textAlign","palette","text","secondary","App","classes","t","useTranslation","useState","imageSrc","setContent","setSubtitle","setColor","className","item","xs","lg","md","Paper","elevation","noValidate","autoComplete","TextField","id","label","onChange","event","target","hex","triangle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA8BeA,MAlBf,SAAkBC,GAChB,OACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EACvBC,UAAU,SACVC,eAAe,SACfC,WAAW,SAHb,UAIE,cAAC,IAAD,CACEC,KAAM,IACNC,QAASR,EAAMS,MACfC,MAAOV,EAAMW,QACbC,MAAO,MAGRZ,EAAMa,a,6CCZPC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMb,QAAQ,GACtBgB,MAAO,SAGXC,IAAK,CACHC,YAAa,SAEfC,SAAU,CACRC,SAAU,GAEZC,MAAO,CACLC,QAAST,EAAMb,QAAQ,GACvBuB,UAAW,SACXjB,MAAOO,EAAMW,QAAQC,KAAKC,eAgFfC,MA1Ef,WAEE,IAAMC,EAAUjB,IACRkB,EAAOC,cAAPD,EAHK,EAUmBE,mBAAS,IAV5B,mBAUNC,EAVM,aAWmBD,oBAAS,IAX5B,gCAYiBA,mBAAS,cAZ1B,mBAYNvB,EAZM,KAYGyB,EAZH,OAamBF,mBAAS,IAb5B,mBAaNrB,EAbM,KAaIwB,EAbJ,OAcaH,mBAAS,WAdtB,mBAcNzB,EAdM,KAcC6B,EAdD,KAyBb,OACE,qBAAKC,UAAS,UAAKR,EAAQT,UAA3B,SACE,eAACrB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EACvBC,UAAU,MADZ,UAEE,cAACH,EAAA,EAAD,CAAMuC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,IAC9B,cAAC1C,EAAA,EAAD,CAAMuC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAC5BzC,WAAS,EACTE,UAAU,SACVC,eAAe,SACfC,WAAW,SAJb,SAKE,eAACsC,EAAA,EAAD,CAAOC,UAAW,EAAlB,UAEE,cAAC5C,EAAA,EAAD,CAAMuC,MAAI,EAAV,SACE,sBAAMD,UAAWR,EAAQd,KAAM6B,YAAU,EAACC,aAAa,MAAvD,SACE,cAACC,EAAA,EAAD,CAAWC,GAAG,iBACZC,MAAQlB,EAAE,cACVmB,SAAU,SAACC,GAAYhB,EAAWgB,EAAMC,OAAO3C,QAC/CA,MAAOC,QAIb,cAACV,EAAA,EAAD,CAAMuC,MAAI,EAAV,SACE,sBAAMD,UAAWR,EAAQd,KAAM6B,YAAU,EAACC,aAAa,MAAvD,SACE,cAACC,EAAA,EAAD,CAAWC,GAAG,iBACZC,MAAQlB,EAAE,YACVmB,SAAU,SAACC,GAAYf,EAAYe,EAAMC,OAAO3C,QAChDA,MAAOG,QAIb,cAACZ,EAAA,EAAD,CAAMuC,MAAI,EACVtC,WAAS,EACPG,eAAe,SACfC,WAAW,SAHb,SAIE,cAAC,IAAD,CAAaG,MAAOA,EAAO0C,SAAU,SAACC,GAAD,OAAWd,EAASc,EAAME,MAAMC,SAAU,gBAMrF,cAACtD,EAAA,EAAD,CAAMuC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACI,cAAC,EAAD,CAAUhC,QAASA,EAASF,MAAOA,EAAO0B,SAAUA,EAAUtB,SAAUA,YCvFrE2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2446b55.chunk.js","sourcesContent":["\r\nimport { Grid } from '@material-ui/core';\r\nimport QRCode from 'qrcode.react'\r\n\r\n\r\ninterface QRProps {\r\n  content: string,\r\n  color?: string,\r\n  imageSrc?: string,\r\n  subTitle?: string,\r\n}\r\n\r\nfunction QREditor(props: QRProps) {\r\n  return (\r\n    <Grid container spacing={0}\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\">\r\n      <QRCode\r\n        size={256}\r\n        fgColor={props.color}\r\n        value={props.content}\r\n        level={'H'}\r\n      >\r\n      </QRCode>\r\n      {props.subTitle}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default QREditor;\r\n","import './App.css';\r\nimport { useState } from \"react\";\r\nimport QREditor from './QR-Editor';\r\nimport { Button } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { TwitterPicker, BlockPicker } from 'react-color'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n    },\r\n  },\r\n  box: {\r\n    borderStyle: 'solid',\r\n  },\r\n  rootGrid: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  const classes = useStyles();\r\n  const { t, } = useTranslation();\r\n\r\n  const DEFAULT_IMAGE_SRC = \"\"\r\n  const DEFAULT_USE_IMAGE = false\r\n  const DEFAULT_CONTENT = \"\"\r\n  const DEFAULT_COLOR = \"\"\r\n\r\n  const [imageSrc, setImageSrc] = useState(\"\")\r\n  const [useImage, setUseImage] = useState(false)\r\n  const [content, setContent] = useState(\"google.ch\")\r\n  const [subTitle, setSubtitle] = useState(\"\")\r\n  const [color, setColor] = useState(\"#00FF00\")\r\n\r\n\r\n  function reset() {\r\n    setImageSrc(DEFAULT_IMAGE_SRC)\r\n    setUseImage(DEFAULT_USE_IMAGE)\r\n    setContent(DEFAULT_CONTENT)\r\n    setColor(DEFAULT_COLOR)\r\n  }\r\n\r\n\r\n  return (\r\n    <div className={`${classes.rootGrid}`}>\r\n      <Grid container spacing={2}\r\n        direction=\"row\">\r\n        <Grid item xs={12} lg={4} md={3} />\r\n        <Grid item xs={12} lg={2} md={3}\r\n          container\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\">\r\n          <Paper elevation={3}>\r\n\r\n            <Grid item>\r\n              <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField id=\"standard-basic\"\r\n                  label= {t(\"qr content\")}\r\n                  onChange={(event) => { setContent(event.target.value) }}\r\n                  value={content}\r\n                />\r\n              </form>\r\n            </Grid>\r\n            <Grid item>\r\n              <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <TextField id=\"standard-basic\"\r\n                  label= {t(\"subtitle\")}\r\n                  onChange={(event) => { setSubtitle(event.target.value) }}\r\n                  value={subTitle}\r\n                />\r\n              </form>\r\n            </Grid>\r\n            <Grid item\r\n            container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\">\r\n              <BlockPicker color={color} onChange={(event) => setColor(event.hex)} triangle={'hide'} />\r\n            </Grid>\r\n          </Paper>\r\n\r\n        </Grid>\r\n\r\n        <Grid item xs={12} lg={2} md={3}>\r\n            <QREditor content={content} color={color} imageSrc={imageSrc} subTitle={subTitle} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}